#!/usr/bin/python3
# -*- coding: utf-8 -*-
import sys,os
import time,datetime
import rospy
import numpy as np
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


class Obstacle():
    def __init__(self):
        self.lidar_detect_distance = 5.0   #避障距离为1.5m
        self.scan_error = 0.2     #过滤掉0.2m内的点云数据
        sub = rospy.Subscriber('/scan',LaserScan,self.getScan,queue_size=10)
        rospy.spin()
    
    def getScan(self,msg):
        #print(msg.ranges)   # 激光扫描角度范围为(-π,π)rad，即(-180°,180°)
        self.angle_min = -3.141592502593994
        self.angle_max = 3.141592502593994
        self.angle_increment = 0.003000000026077032
        self.scan_filter =[]
        length = len(np.arange(self.angle_min,self.angle_max,self.angle_increment))-1
        print(length)
        for i in range(0,length):
            try:
                if 340 < i < 360:   # 取激光扫描角度
                    if msg.ranges[i] >= self.scan_error:
                        self.scan_filter.append(msg.ranges[i])
            except Exception as e:
                continue
        
        print(min(self.scan_filter))
        if min(self.scan_filter) < self.lidar_detect_distance:
            self.update_status()
        

    def update_status(self):
        cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        cmd_pub.publish(twist)
        rospy.loginfo("distance of Obstacle {}".format(self.lidar_detect_distance))


if __name__ == '__main__':
    
    rospy.init_node('stop')
    try:
        Obstacle()    
        
    except Exception as e:
        pass

